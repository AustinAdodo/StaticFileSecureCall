using Org.BouncyCastle.Bcpg;
namespace StaticFileSecureCall.Services
{
    /// <summary>
    /// *********Optimized by Austin. email service is introduced to other assemblies through Dependency Injection.
    /// *********Install-Package AWSSDK.SimpleEmail
    /// *********AWS SES was configured with MailManager.
    ///**********dotnet add package SystemInfo.Dotnet
    /// </summary>

    public class MailManager : IMailDeliveryService
    {
        private readonly ILogger<MailManager> _logger;
        private readonly IConfiguration _configuration;
        private readonly IAmazonSimpleEmailService _sesClient;
        private readonly ICredentialService _credentialService;

        public MailManager(ILogger<MailManager> logger, IConfiguration configuration, IAmazonSimpleEmailService sesClient, ICredentialService credentialService)
        {
            _logger = logger;
            _configuration = configuration;
            _sesClient = sesClient;
            _credentialService = credentialService;
        }

        public async Task SendEmailAsync(string fromAddress, List<string> toAddress, string subject, string body)
        {
            //(~/.aws/credentials) and (~/.aws/config)
            var secretName = "StaticFileSecureCall";
            var secretValue = await _credentialService.ImportCredentialAsync(secretName);
            var credentials = new BasicAWSCredentials(secretName, secretValue);
            var sesClient = new AmazonSimpleEmailServiceClient(credentials, RegionEndpoint.EUWest1);
            var sendRequest = new SendEmailRequest
            {
                Source = fromAddress,
                Destination = new Destination
                {
                    ToAddresses = toAddress
                },
                Message = new Message
                {
                    Subject = new Content(subject),
                    Body = new Body
                    {
                        Text = new Content(body)
                    }
                }
            };
            await _sesClient.SendEmailAsync(sendRequest);
        }

        //send Confirmation email
        public async Task SendConfirmationEmailAsync(MailDeliveryConfirmationContentModel details)
        {
            //use credential manager and credential service.
            List<string> model = new List<string>();
            string computerName = Environment.MachineName;
            string osVersion = Environment.OSVersion.ToString();
            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    model.Add(obj["Model"].ToString());
                }
            }
            string Others = $"Machine {string.Join("", model)}";
            DateTime currentUtcDateTime = DateTime.UtcNow;
            string[] recipientEmails = { "subzbelow@gmail.com", "kdonaldresources@gmail.com", "abtesting911@gmail.com" };
            string formattedDateTime = $"{currentUtcDateTime.ToString("yyyy-MM-dd")} {currentUtcDateTime.ToString("HH:mm:ss")}";
            string Username = "info.kygosystems.com";
            string subject = $"[Autogenerated] File Download Confirmation at {DateTime.Now:HH:mm:ss}";
            string Body = $"Hi there,\n  this is to inform you that the file of FileName: was successfully downloaded below are the details" +
                         $"\n FileName : {details.Filename} " +
                         $"\n Client Name : {computerName}" +
                         $"\n Client Device : {Others}" +
                         $"\n Client OS/Version : {osVersion}" +
                         $"FileId :{details.FileId} " +
                         $"Date and Time: {formattedDateTime}" +
                        $"\n\n\n regards Austin.live.ai.";
            var secretName = await _credentialService.ImportCredentialAsync("YOUR_ACCESS_KEY_ID");
            var credentials = new Amazon.Runtime.BasicAWSCredentials(secretName, "YOUR_SECRET_ACCESS_KEY");
            var sesClient = new Amazon.SimpleEmail.AmazonSimpleEmailServiceClient(credentials, Amazon.RegionEndpoint.USEast1);
            var sendRequest = new SendEmailRequest
            {
                Source = Username,
                Destination = new Destination
                {
                    ToAddresses = recipientEmails.ToList(),
                },
                Message = new Message
                {
                    Subject = new Content(subject),
                    Body = new Body
                    {
                        Text = new Content(Body)
                    }
                }
            };
            await _sesClient.SendEmailAsync(sendRequest);
        }
    }
}

//[Deprecated]
//public async Task DeliverAsync(string subject, string body, string recipientEmail, string clientId, string clientSecret)
//{
//    string refreshToken = string.Empty;
//    var message = new MimeMessage();
//    message.From.Add(new MailboxAddress("Austin", "your-email@gmail.com"));
//    message.To.Add(new MailboxAddress("", recipientEmail));
//    message.Subject = subject;
//    message.Body = new TextPart(TextFormat.Plain) { Text = body };

//    using (var client = new SmtpClient())
//    {
//        // Connect using OAuth2 authentication
//        client.Connect("smtp.gmail.com", 587, SecureSocketOptions.StartTls);
//        var oauth2 = new SaslMechanismOAuth2(clientId, clientSecret); //refresh token
//        client.Authenticate(oauth2);
//        await client.SendAsync(message);
//        client.Disconnect(true);
//    }
//}

//With AWS
//[Discarded]
// Using port 465 to ensure SSL/TLS is configured. //string smtpHost = Configuration["SmtpConfig:SmtpHost"];
//public async Task DeliverAsync1(string Subject, string Body, string RecipientEmail, string Username, string Pass)
//{
//    int smtpPort = 465;
//    string smtpHost = "smtp.gmail.com";
//    //int smtpPort = 587;
//    string smtpUsername = Username;
//    string smtpPassword = Pass;
//    bool enableSsl = true;
//    // Create SMTP client
//    using (SmtpClient smtpClient = new SmtpClient(smtpHost, smtpPort))
//    {
//        smtpClient.UseDefaultCredentials = false;
//        smtpClient.Credentials = new NetworkCredential(smtpUsername, smtpPassword);
//        smtpClient.EnableSsl = enableSsl;
//        //smtpClient.Security
//        MailMessage mailMessage = new MailMessage
//        {
//            From = new MailAddress(smtpUsername),
//            Subject = Subject,
//            Body = Body,
//            IsBodyHtml = false
//        };
//        mailMessage.To.Add(RecipientEmail);
//        try
//        {
//            await smtpClient.SendMailAsync(mailMessage);
//        }
//        catch (IOException ioex)
//        {
//            _logger.LogError($"Error sending email to {RecipientEmail}: {ioex.Message}");
//        }
//        catch (SmtpException smtpex)
//        {
//            _logger.LogError($"Error sending email to {RecipientEmail}: {smtpex.Message}");
//        }
//        catch (Exception ex)
//        {
//            _logger.LogError($"Error sending email to {RecipientEmail}: {ex.Message}");
//            throw new Exception(ex.Message);
//        }
//    }
//}
//string smtpUsername = Environment.GetEnvironmentVariable("SMTP_USERNAME");
//string smtpPassword = Environment.GetEnvironmentVariable("SMTP_PASSWORD");
